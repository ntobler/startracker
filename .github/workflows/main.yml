name: Test develop CI/CD Pipeline

on:
  push:
    branches:
      - "**"  # All branches
    tags-ignore:
      - "**"  # Ignore all tags

jobs:

  check-dockerfile-changes:
    runs-on: ubuntu-22.04
    outputs:
      docker: ${{ steps.filter.outputs.docker }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          base: ${{ github.ref }}
          filters: |
            docker:
              - 'Dockerfile'

  build-docker:
    runs-on: ubuntu-22.04
    needs: check-dockerfile-changes
    if: needs.check-dockerfile-changes.outputs.docker == 'true'

    permissions:
      contents: read
      packages: write   # needed for pushing to GHCR

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: |
            linux/arm64
            linux/amd64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/startracker-build:latest
            ghcr.io/${{ github.repository_owner }}/startracker-build:${{ github.sha }}

  test:
    name: Run Tests
    runs-on: ubuntu-22.04
    needs: build-docker
    if: always()
    container:
      image: ghcr.io/${{ github.repository_owner }}/startracker-build:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # poetry==2.1.4 has a bug
    - name: Install dependencies
      run: |
        pip install poetry==2.1.3
        poetry install
      env:
        POETRY_VIRTUALENVS_CREATE: false

    - name: Pre-commit checks
      run: |
        PYTHONFAULTHANDLER=1 pre-commit run --all-files

    - name: Run pytest
      run: |
        pytest

    - name: Run mypy
      run: |
        mypy

    - name: Run cargo test
      run: |
        cargo test

  build-release:
    name: Create Release
    needs: test
    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/${{ github.repository_owner }}/startracker-build:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    steps:

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false

    - name: Build in release mode
      run: |
        cargo build --release --features cam

    - name: Upload executable
      run: |
        gh release upload "${{ github.ref_name }}" "target/release/startracker" --clobber
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
